# =====================================
# TikTok Live Music Player - Docker Compose
# =====================================

services:
  # =====================================
  # Main Application Service
  # =====================================
  tiktok-music-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: tiktok-live-music:latest
    container_name: tiktok-music-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - FRONTEND_URL=http://localhost:3000
      - STATS_UPDATE_INTERVAL=30000
      - SOCKET_CORS_ORIGIN=http://localhost:3000
    # Environment file (optional)
    env_file:
      - .env
      - example.env
    volumes:
      # Logs persistence
      - app-logs:/app/logs
      # Optional: Config files
      # - ./config:/app/config:ro
    networks:
      - tiktok-music-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # =====================================
  # Redis Cache (Optional - for scaling)
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: tiktok-music-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - tiktok-music-network
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    profiles:
      - with-redis

  # =====================================
  # Nginx Reverse Proxy (Optional)
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: tiktok-music-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - tiktok-music-app
    networks:
      - tiktok-music-network
    profiles:
      - with-nginx

  # =====================================
  # Monitoring (Optional)
  # =====================================
  prometheus:
    image: prom/prometheus:latest
    container_name: tiktok-music-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - tiktok-music-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: tiktok-music-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - tiktok-music-network
    profiles:
      - monitoring

# =====================================
# Networks
# =====================================
networks:
  tiktok-music-network:
    driver: bridge
    name: tiktok-music-network

# =====================================
# Volumes
# =====================================
volumes:
  app-logs:
    driver: local
    name: tiktok-music-logs
  redis-data:
    driver: local
    name: tiktok-music-redis
  nginx-logs:
    driver: local
    name: tiktok-music-nginx-logs
  prometheus-data:
    driver: local
    name: tiktok-music-prometheus
  grafana-data:
    driver: local
    name: tiktok-music-grafana

# =====================================
# Usage Examples
# =====================================

# Basic deployment:
# docker-compose up -d

# With Redis cache:
# docker-compose --profile with-redis up -d

# With Nginx proxy:
# docker-compose --profile with-nginx up -d

# Full monitoring stack:
# docker-compose --profile monitoring --profile with-redis --profile with-nginx up -d

# Development mode:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# View logs:
# docker-compose logs -f tiktok-music-app

# Scale app (if needed):
# docker-compose up -d --scale tiktok-music-app=2

# Stop services:
# docker-compose down

# Cleanup volumes:
# docker-compose down -v 